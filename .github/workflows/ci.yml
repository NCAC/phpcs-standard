name: CI

on:
  push:
    branches: [main, develop]
    tags:
      - "*"
    paths:
      - "**"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "**"
      - ".github/workflows/ci.yml"

jobs:
  psalm:
    name: Psalm Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run Psalm via Phing
        run: vendor/bin/phing psalm

  phpcs:
    name: PHPCS Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPCS via Phing
        run: vendor/bin/phing cs

      - name: Test standard can be installed and detected
        run: |
          vendor/bin/phpcs --config-set installed_paths vendor/ncac/phpcs-standard
          vendor/bin/phpcs -i | grep NCAC || echo "NCAC standard not detected in phpcs -i"

  phpunit:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPUnit Tests via Phing
        run: vendor/bin/phing tests

      - name: Run PHPUnit with JUnit XML output
        run: ./vendor/bin/phpunit --log-junit junit.xml

      - name: Run End-to-End Tests via Phing
        run: vendor/bin/phing end2end

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          coverage: xdebug
          tools: composer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate coverage report
        run: XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Generate test results with coverage
        run: XDEBUG_MODE=coverage vendor/bin/phpunit --log-junit junit.xml --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: yamllint .github/ docs/ .yamllint.yml docker-compose.yml

  publish-packagist:
    name: Publish to Packagist
    needs: [psalm, phpcs, phpunit, coverage, yamllint]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Publish to Packagist
        run: |
          curl -X POST \
            "https://packagist.org/api/update-package" \
            -d "username=${{ secrets.PACKAGIST_USERNAME }}" \
            -d "apiToken=${{ secrets.PACKAGIST_API_TOKEN }}" \
            -d '{"repository":"https://github.com/ncac/phpcs-standard"}' \
            -H 'Content-Type: application/json'
